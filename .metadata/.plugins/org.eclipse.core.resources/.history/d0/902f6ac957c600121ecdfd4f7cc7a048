package test;

import java.net.MalformedURLException;
import java.rmi.Naming;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.rmi.server.UnicastRemoteObject;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.ThreadLocalRandom;

import tree.NodeData;
import tree.TreeNode;

import message.Message;
import message.Message.type;

public class Byzantine_OM extends UnicastRemoteObject implements Byzantine_OM_Interface, Runnable {

	/**
	 * 
	 */
	private static final long serialVersionUID = 6811798268590999116L;

	//store the processes' urls
	private List<String> urls;
	
	//total number of processes
	private int numProcesses;
	
	//this process's index
	private int index;
	
	//decision list
	private TreeNode decision_tree;	
	
	//default value for the order
	private boolean defaultOrder = true;
	
	//number of faulty processes
	private int numfaulty;
	
	//indicate how many to be received for ACK
	private int numToReceive;
	
	//indicate how many real messages to be received 
	private int numExpected = 1;
	
	//indicate current round
	private int round = 0;
	
	//lock for the shared variable
	private byte[]  lock= new byte[0];
	
	//the time last message arrives
	private long pre_time_MSG;
	
	//the time last ACK arrives
	private long pre_time_ACK;
	
	//get the object 
	private final Byzantine_OM outer = this;
	
	//flag that synchronize the execution
	private boolean set = false;
	
	//the number of messages received
	private int counter = 0;
	
	//the number of messages sent
	private int sendCounter = 0;
	
	//fault type
	public enum faultyType {NOR, AFK, RAN}; 
	
	private faultyType fault; 
	
	private int finalCount = 0; 
	
	//constructor
	public Byzantine_OM (List<String> urls, int index, faultyType fault) throws RemoteException{
			//get the processes' list
			this.urls = urls;
			
			//get the index of this process
			this.index = index;
			
			//get the total number of processes
			this.numProcesses = urls.size();
			
			//get total number of processes
			this.numToReceive = this.numProcesses;
			
			//get it's fault type
			this.fault = fault;
	}
	

	
	/**
	 * start a new thread to process the incoming message
	 */
	public void receive(Message msg, int setDelay) throws RemoteException {
		new Thread(new receiveProcess(msg, setDelay)).start();
	}
	
	/*
	 * (non-Javadoc)
	 * @see test.Byzantine_OM_Interface#startAlgorithm(boolean, int)
	 */
	public void startAlgorithm(boolean Order, int numfaulty){
		Message msg = new Message(index, Order, numfaulty, type.MSG);
		for(int i=0; i<numProcesses; i++){
			if(i != index){
				Byzantine_OM_Interface remoteProcess = getProcess(urls.get(i));
				try {
					//System.out.println("sending to " + urls.get(i) +"\n msg:" + msg.getSequence());
					remoteProcess.receive(msg, 0);
				} catch (RemoteException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
		}
		while(finalCount < numProcesses - numfaulty - 1){
			try {
				Thread.sleep(500);
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
		}
		System.out.println("excution finished!\n" + "The commander is: " + fault + "\nand the initial value is: " + 
				Order +" \n" + "the correct process's number(exclude the commander): " + (numProcesses - numfaulty -1) + "\nand " + 
				finalCount + " made the decition:" + Order);
		}
	
	
	/**
	 * invoked by the run method in the inner class receiveProcess
	 * they cooperate with each other to simulate round execution algorithm
	 * @author Si Li
	 */
	public void run() {
		//execute numfaulty rounds
		while(round < numfaulty + 1){
			//wait for expected messages from other processes
			while(numExpected > counter && (System.currentTimeMillis() - pre_time_MSG < 2000)){
				try {
					Thread.sleep(200);
				} catch (InterruptedException e) {
					e.printStackTrace();
				}
			}
			
			Message ackMsg = new Message(type.ACK, round);
			//send ACK to the rest of process indicating that next round can be started
			for(int i=0; i<numProcesses; i++)
				if(i != index)
					try {
						getProcess(urls.get(i)).receive(ackMsg, 0);
					} catch (RemoteException e) {
						e.printStackTrace();
					}
			//wait for enough ACK from other process
			while(numToReceive > numfaulty + 2 && (System.currentTimeMillis() - pre_time_ACK < 2000)){
				try {
					Thread.sleep(200);
				} catch (InterruptedException e) {
					e.printStackTrace();
				}
			}
			
			synchronized(lock){
				round++;
				numExpected = numExpected*(numProcesses - round - numfaulty - 1);
				numToReceive = numProcesses;
				counter = 0;
				sendCounter = 0;
				set = true;
			}
			
			if(round < numfaulty){
				while(sendCounter <= numExpected){
					try {
						Thread.sleep(200);
					} catch (InterruptedException e) {
						e.printStackTrace();
					}
				}
				try {
					Thread.sleep(500);
				} catch (InterruptedException e) {
					e.printStackTrace();
				}
				set = false;
			}
			
		}
		if(fault != faultyType.RAN){
			System.out.println("decision: " + majority(decision_tree)+ " is made by process:" + index);
			try {
				getProcess(urls.get(decision_tree.getId().get(0))).report();
			} catch (RemoteException e) {
				e.printStackTrace();
			}
		}
		else {
			System.out.println("Random decision: " + ThreadLocalRandom.current().nextBoolean() + " by " + index);
		}
	}
	
	private class receiveProcess implements Runnable{
		private Message msg;
		private int delay;
		
		public receiveProcess(Message msg, int setDelay){
			this.msg = msg;
			this.delay = setDelay;	
		}
		
		
		/**
		 * this method deal with the incoming messages
		 * when it's {@MSG}
		 * set the node of the tree, and increase the counter
		 * when it's {@ACK}
		 * reduce the numToReceive 
		 * @author Si Li
		 */
		public void run() {
			if(fault != faultyType.AFK){
			type msgtype = msg.getType();
			switch (msgtype){
			//if it's real message, change the corresponding node in the tree 
			case MSG:
				List<Integer> localSq = new ArrayList<Integer>(msg.getSequence());
				//refresh current time when receiving new message
				pre_time_MSG = System.currentTimeMillis();
				if(localSq.size() == 1){
					numfaulty = msg.getNumFaulty();
					//create local tree
					NodeData root = new NodeData(msg.getOrder());
					decision_tree = new TreeNode(localSq, null, null, root);
					createTree(numfaulty-1, decision_tree);
					if(index == 1)
					printWholeTree(decision_tree);
					try {
						Thread.sleep(1000);
					} catch (InterruptedException e) {
						e.printStackTrace();
					} 
					//start the thread to deal with the incoming message
					new Thread(outer).start(); 
				}
				else{
					//set corresponding node to the received value
					TreeNode currNode = findNode(localSq, decision_tree, 1);
					currNode.setData(new NodeData(msg.getOrder()));
				}
				//if this message comes from the next round, pend it
				while(round < localSq.size() - 1){
					try {
						Thread.sleep(200);
					} catch (InterruptedException e) {
						e.printStackTrace();
					}
				}
				synchronized(lock){
					counter++;
				}

				while(!set){
					try {
						Thread.sleep(200);
					} catch (InterruptedException e) {
						e.printStackTrace();
					}
				}
			
				msg.add_id(index);
				if(fault == faultyType.RAN){
					msg.setOrder(ThreadLocalRandom.current().nextBoolean());
				}
				//check if it's the last round
				if(localSq.size() <= numfaulty){
					//iterate the processes that are not act as commander
					for(int i=0; i<numProcesses; i++){
						if(i!=index && !localSq.contains(i)){
							Byzantine_OM_Interface remoteProcess = getProcess(urls.get(i));
							try {
								remoteProcess.receive(msg, delay);
								sendCounter++;
							} catch (RemoteException e) {
								e.printStackTrace();
							}
						}
					}
				}
				break;
			// ACK from other process
			case ACK:
				int curr_round = msg.getRound();
				pre_time_MSG = System.currentTimeMillis();
				while(curr_round > round){
					try {
						Thread.sleep(200);
					} catch (InterruptedException e) {
						e.printStackTrace();
					}
				}
				synchronized(lock){
					numToReceive--;
				}
			}
			}
		}
	}	
	
	protected void createTree(int current_round, TreeNode node){
		//directly create child node
		for(int i=0; i<numProcesses; i++)
			if(i!=index && !node.getId().contains(i)){
				List<Integer> newid = new ArrayList<Integer>(node.getId());
				newid.add(i);
				TreeNode newchild = new TreeNode(newid, null, null, new NodeData(defaultOrder));
				TreeNode.appendAsChild(newchild, node);
				if(current_round!=0)
					//for every child node, recursively execute this method
					createTree(current_round-1, newchild);
			}
					
	}
	
	private TreeNode findNode(List<Integer> sq, TreeNode node, int level){
		//get the copy of the sequence
		List<Integer> localSq = new ArrayList<Integer>(sq);
		//search only this level and it's children, get partially matched node
		TreeNode nextNode = TreeNode.search(localSq.subList(0, level), node);
		//if the size matches
		if(level == sq.size())
			return nextNode;
		//else go to next level
		else return findNode(localSq, nextNode, level+1);
	}
	
	protected Byzantine_OM_Interface getProcess(String url){
		Byzantine_OM_Interface remoteProcess;
		try {
			remoteProcess = (Byzantine_OM_Interface) Naming.lookup(url);
			return remoteProcess;
		} catch (MalformedURLException | RemoteException | NotBoundException e) {
			e.printStackTrace();
		}
		return null;
	}
	
	private void printWholeTree(TreeNode node){
		System.out.println(node.getId());
		
		if(node.getChildren() == null){
			return;
		}
		else{			
			for(TreeNode m: node.getChildren()){
				if(m != null){
				printWholeTree(m);
				}
			}
		}
	}
	
	private boolean majority(TreeNode node){
		int con = 0;
		int pro = 0;
		
		if(node.getData().getOrder())
			pro++;
		else con++;
		
		//if it's leaf, return the value at once
		if(node.isLeaf())
			return node.getData().getOrder();
		else {
			//if not leaf, iterate all the children of the node
			//and recursively apply this method on each of them
			for(TreeNode m: node.getChildren())
				if(majority(m))
					pro++;
				else con++;
			if(pro > con){
				return true;
			}
			else if(pro < con){
				return false;
			}
			else return defaultOrder;
		}
	}



	/**
	 * when finished, report to the initial process
	 */
	public void report() throws RemoteException {
		new Thread(new report()).start();
	}
	
	class report implements Runnable {
	
		synchronized public void run() {
			finalCount++;
			//System.out.println("final" + finalCount);
		}
	}
	
}
